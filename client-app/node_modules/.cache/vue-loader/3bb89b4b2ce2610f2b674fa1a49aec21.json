{"remainingRequest":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/FileUpload.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/FileUpload.vue","mtime":1541344112856},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.dropbox {\n    outline: 2px dashed grey; /* the dash box */\n    outline-offset: -10px;\n    background: lightcyan;\n    color: dimgray;\n    padding: 10px 10px;\n    min-height: 200px; /* minimum height */\n    position: relative;\n    cursor: pointer;\n}\n\n.input-file {\n    opacity: 0; /* invisible but it's there! */\n    width: 100%;\n    height: 200px;\n    position: absolute;\n    cursor: pointer;\n}\n\n.dropbox:hover {\n    background: lightblue; /* when mouse over to the drop zone, change color */\n}\n\n.dropbox p {\n    font-size: 1.2em;\n    text-align: center;\n    padding: 50px 0;\n}\n",{"version":3,"sources":["FileUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"FileUpload.vue","sourceRoot":"src/views/custom","sourcesContent":["<template>\n    <b-card>\n          <b-row>\n            <b-col>\n            <form enctype=\"multipart/form-data\" novalidate v-if=\"isInitial || isSaving\">\n                <h1>Upload CSV File</h1>\n                <div class=\"dropbox\">\n                <input type=\"file\" :name=\"uploadFieldName\" :disabled=\"isSaving\" @change=\"filesChange($event.target.name, $event.target.files); fileCount = $event.target.files.length\"\n                    accept=\"text/csv\" class=\"input-file\">\n                    <p v-if=\"isInitial\">\n                    Drop your file(s) here <br> or click to browse\n                    </p>\n                    <p v-if=\"isSaving\">\n                    Uploading {{ fileCount }} files...\n                    </p>\n                </div>\n            </form>\n            </b-col>\n          </b-row>\n          <b-row>\n              <b-col>\n                  <div v-if=\"isSuccess\">\n                    <h2>Uploaded {{ uploadedFiles.length }} file(s) successfully.</h2>\n                    <p>\n                    <a href=\"javascript:void(0)\" @click=\"reset()\">Upload again</a>\n                    </p>\n                    <ul class=\"list-unstyled\">\n                    <li v-for=\"file in uploadedFiles\">\n                        {{ file }}\n                    </li>\n                    </ul>\n                </div>\n                <!--FAILED-->\n                <div v-if=\"isFailed\">\n                    <h2>Uploaded failed.</h2>\n                    <p>\n                    <a href=\"javascript:void(0)\" @click=\"reset()\">Try again</a>\n                    </p>\n                    <pre>{{ uploadError }}</pre>\n                </div>\n              </b-col>\n          </b-row>\n          <div slot=\"footer\">\n            <b-row>\n                <b-col class=\"col-sm-3\">\n                    <b-button type=\"submit\" size=\"sm\" variant=\"primary\" v-on:click=\"trainModel\"><i class=\"fa fa-dot-circle-o\"></i> Train Model</b-button>\n                </b-col>\n                <b-col class=\"col-sm-9\">\n                    <div id=\"accuracy\"><span v-if=\"accuracy !== null\">Accuracy: {{ accuracy.R2 }}</span></div>\n                </b-col>\n            </b-row>\n          </div>\n        </b-card>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport {APIService} from '../../APIService'\nconst apiService = new APIService();\n\nconst STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;\n\n  export default {\n    data: function() {\n        return {\n        uploadedFiles: [],\n        accuracy: null,\n        uploadError: null,\n        currentStatus: null,\n        uploadFieldName: 'file'\n        };\n    },\n    computed: {\n      isInitial() {\n        return this.currentStatus === STATUS_INITIAL;\n      },\n      isSaving() {\n        return this.currentStatus === STATUS_SAVING;\n      },\n      isSuccess() {\n        return this.currentStatus === STATUS_SUCCESS;\n      },\n      isFailed() {\n        return this.currentStatus === STATUS_FAILED;\n      }\n    },\n    methods: {\n        reset() {\n            // reset form to initial state\n            this.currentStatus = STATUS_INITIAL;\n            this.uploadedFiles = [];\n            this.uploadError = null;\n        },\n        save(formData) {\n        // upload data to the server\n        this.currentStatus = STATUS_SAVING;\n\n            apiService.uploadFile(formData)\n                .then(response => {\n                this.uploadedFiles = [].concat(response.FileName);\n                this.currentStatus = STATUS_SUCCESS;\n                })\n                .catch(err => {\n                this.uploadError = err.response;\n                this.currentStatus = STATUS_FAILED;\n                });\n            },\n            filesChange(fieldName, fileList) {\n            // handle file changes\n            const formData = new FormData();\n\n            if (!fileList.length) return;\n\n            // append the files to FormData\n            Array\n                .from(Array(fileList.length).keys())\n                .map(x => {\n                formData.append(fieldName, fileList[x], fileList[x].name);\n                });\n\n            // save it\n            this.save(formData);\n        },\n        trainModel(){\n            let queryString = ''\n            console.log('Query String is: ' + queryString)\n            apiService.trainModel(queryString).then((data) => {\n                    this.accuracy = data;\n                })\n        },\n    },\n    mounted() {\n        this.reset();\n    }\n  }\n</script>\n\n<style>\n    .dropbox {\n        outline: 2px dashed grey; /* the dash box */\n        outline-offset: -10px;\n        background: lightcyan;\n        color: dimgray;\n        padding: 10px 10px;\n        min-height: 200px; /* minimum height */\n        position: relative;\n        cursor: pointer;\n    }\n\n    .input-file {\n        opacity: 0; /* invisible but it's there! */\n        width: 100%;\n        height: 200px;\n        position: absolute;\n        cursor: pointer;\n    }\n\n    .dropbox:hover {\n        background: lightblue; /* when mouse over to the drop zone, change color */\n    }\n\n    .dropbox p {\n        font-size: 1.2em;\n        text-align: center;\n        padding: 50px 0;\n    }\n</style>"]}]}