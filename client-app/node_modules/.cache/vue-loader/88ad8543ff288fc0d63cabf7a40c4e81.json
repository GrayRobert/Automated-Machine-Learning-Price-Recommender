{"remainingRequest":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/PredictModel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/PredictModel.vue","mtime":1543397855809},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { APIService } from '../../APIService'\nimport { AtomSpinner } from 'epic-spinners'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport FormGenerator from './FormGenerator'\nimport numeral from 'numeral'\n\nimport JQuery from 'jquery'\nlet $ = JQuery\n\nconst apiService = new APIService();\n\nexport default {\n    name: \"PredictModel\",\n    components: {\n        FormGenerator,\n        AtomSpinner\n    },\n    props: { \n        history: {\n            type: Array,\n            required: true\n        },\n        model: {\n            type: Object,\n            required: false\n        }\n    },\n    data: function() {\n        return {\n            preProcessModal: false,\n            predictingInProgress: false,\n            results: null,\n            modelSelection: [\n                { value: null, text: 'Please select a model' },\n            ],\n            selectedModelId: null,\n            selectedModel: {},\n            models: null,\n            formData: {},\n            schema: [\n                \n            ],\n        };\n    },\n    computed: {\n        // Sets the model based on the selected modelId\n        findModel: function() {\n            const model = _.find(this.models, { 'id': this.selectedModelId }) || ''\n            return model\n        },\n    },\n    filters: {\n        percentageFormatRound: function(value) {\n        return numeral(value).format('0%')\n        },\n        formatRound: function(value) {\n        return numeral(value).format('0.00')\n        },\n    },\n    methods: {\n        getPrediction(){\n            this.preProcessModal = false\n            this.predictingInProgress = true\n            let queryString = $.param(this.formData); // This bit of JQuery turns the form data into a query string\n            console.log('Query String is: ' + queryString)\n            apiService.predictPrice(queryString).then((data) => {\n                    this.results = data;\n                    this.predictingInProgress = false\n                })\n        },\n        getModelTrainingHistory(){\n            let self = this;\n            // Add any models that have a model_file\n            self.modelSelection = []\n            this.history.forEach(function(model) {\n                if(model.model_file) {\n                    self.modelSelection.push(\n                        { value: model.id, text: model.id + ' - ' + model.model_type +  ' - ' + self.formatDate(model.trained_date)}\n                    )\n                }\n            })  \n        },\n        formatDate(date){\n            return moment(date).format('MMM Do YYYY, h:mm:ss a')\n        },\n        parseModel(){\n            const model = _.find(this.history, { 'id': this.selectedModelId })\n            this.selectedModel = model\n            const modelArray = JSON.parse(model.test_json)\n            this.formData = modelArray[0]\n            this.formData.model_id = this.selectedModelId\n\n            for (const [key, value] of Object.entries(this.formData)) {\n                \n                //don't need a for field for this\n                if (key === 'model_id') { continue; }\n\n                let inputField = {}\n                if(isNaN(value)){\n                    inputField = {\n                    fieldType: \"TextInput\",\n                    placeholder: value.toString(),\n                    value: value.toString(),\n                    label: key,\n                    name: key\n                    }\n                } else {\n                    inputField = {\n                    fieldType: \"NumberInput\",\n                    placeholder: parseInt(value, 10),\n                    value: parseInt(value, 10),\n                    label: key,\n                    name: key\n                    }\n                }\n                \n                this.schema.push(inputField)\n\n                this.$emit(\"changeSelectedModelId\", this.selectedModelId)\n            }\n\n\n            console.log(this.formData)\n\n        }\n    },\n    mounted() {\n        this.getModelTrainingHistory()\n    },\n    watch: { \n        'selectedModelId': function() {\n            this.parseModel()\n        },\n        'history': function() {\n            this.getModelTrainingHistory()\n        },\n        'model': function() {\n            console.log(\"model watched\")\n            this.selectedModelId = this.model.id\n        },\n    }\n\n}\n",{"version":3,"sources":["PredictModel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"PredictModel.vue","sourceRoot":"src/views/custom","sourcesContent":["<template>\n    <b-card>\n        <b-row>\n        <b-col>\n            <h2>Price Recommendation</h2>\n        </b-col>\n        </b-row>\n        <b-row>\n            <b-col>\n                <b-form-group>\n                    <label>Select Previously Trained Model</label>\n                    <b-form-select v-model=\"selectedModelId\" :options=\"modelSelection\" class=\"mb-3\" />\n                </b-form-group>\n            </b-col>\n        </b-row>\n        <b-row>\n            <b-col sm=\"7\">\n                <div class=\"mediumandgrey\">Accuracy:</div>\n                <div class=\"bigandgreen\">{{ selectedModel.accuracy_r2 | percentageFormatRound }}</div>\n            </b-col>\n            <b-col sm=\"5\">\n                <div class=\"mediumandgrey\">Error: +/-</div>\n                <div class=\"bigandorange\"> {{ selectedModel.accuracy_rmse | currency }}</div>\n            </b-col>\n        </b-row>\n        <div slot=\"footer\">\n        <b-row>\n            <b-col class=\"col-sm-3\">\n                <b-button type=\"submit\" size=\"sm\" variant=\"primary\" v-on:click=\"preProcessModal = true\"><i class=\"fa fa-dot-circle-o\"></i> Get Recommendation</b-button>\n            </b-col>\n            <b-col class=\"col-sm-9\">\n            <b-row v-if=\"predictingInProgress\">\n                <b-col class=\"col-sm-2\">\n                    <div>\n                        <atom-spinner\n                        :animation-duration=\"1000\"\n                        :size=\"30\"\n                        color=\"#20a8d8\"\n                        />\n                    </div>\n                </b-col>\n                <b-col class=\"col-sm-10\">\n                    <span class=\"predicting-text\">Recommending in progress...</span>\n                </b-col>\n            </b-row>\n            <div v-if=\"results !== null\">Price Recommended: {{ results.RecommendedPrice[0] | currency}}</div>\n            </b-col>\n        </b-row>\n        </div>\n        <b-modal title=\"Price Recommendation Options\" size=\"lg\" v-model=\"preProcessModal\" @ok=\"preProcessModal = false\" ok-title=\"Recommend Price\">\n            <b-row>\n                <b-col>\n                    <form-generator \n                        :schema=\"schema\"\n                        v-model=\"formData\">\n                    </form-generator>\n                </b-col>\n                {{ formData }}\n            </b-row>\n            <div slot=\"modal-footer\">\n                    {{ model.id }}\n                    <b-button type=\"submit\" size=\"sm\" variant=\"primary\" v-on:click=\"getPrediction\"><i class=\"fa fa-dot-circle-o\"></i> Recommend Price</b-button>\n                </div>\n        </b-modal>\n    </b-card>\n</template>\n\n<script>\n    import { APIService } from '../../APIService'\n    import { AtomSpinner } from 'epic-spinners'\n    import moment from 'moment'\n    import _ from 'lodash'\n    import FormGenerator from './FormGenerator'\n    import numeral from 'numeral'\n\n    import JQuery from 'jquery'\n    let $ = JQuery\n\n    const apiService = new APIService();\n\n    export default {\n        name: \"PredictModel\",\n        components: {\n            FormGenerator,\n            AtomSpinner\n        },\n        props: { \n            history: {\n                type: Array,\n                required: true\n            },\n            model: {\n                type: Object,\n                required: false\n            }\n        },\n        data: function() {\n            return {\n                preProcessModal: false,\n                predictingInProgress: false,\n                results: null,\n                modelSelection: [\n                    { value: null, text: 'Please select a model' },\n                ],\n                selectedModelId: null,\n                selectedModel: {},\n                models: null,\n                formData: {},\n                schema: [\n                    \n                ],\n            };\n        },\n        computed: {\n            // Sets the model based on the selected modelId\n            findModel: function() {\n                const model = _.find(this.models, { 'id': this.selectedModelId }) || ''\n                return model\n            },\n        },\n        filters: {\n            percentageFormatRound: function(value) {\n            return numeral(value).format('0%')\n            },\n            formatRound: function(value) {\n            return numeral(value).format('0.00')\n            },\n        },\n        methods: {\n            getPrediction(){\n                this.preProcessModal = false\n                this.predictingInProgress = true\n                let queryString = $.param(this.formData); // This bit of JQuery turns the form data into a query string\n                console.log('Query String is: ' + queryString)\n                apiService.predictPrice(queryString).then((data) => {\n                        this.results = data;\n                        this.predictingInProgress = false\n                    })\n            },\n            getModelTrainingHistory(){\n                let self = this;\n                // Add any models that have a model_file\n                self.modelSelection = []\n                this.history.forEach(function(model) {\n                    if(model.model_file) {\n                        self.modelSelection.push(\n                            { value: model.id, text: model.id + ' - ' + model.model_type +  ' - ' + self.formatDate(model.trained_date)}\n                        )\n                    }\n                })  \n            },\n            formatDate(date){\n                return moment(date).format('MMM Do YYYY, h:mm:ss a')\n            },\n            parseModel(){\n                const model = _.find(this.history, { 'id': this.selectedModelId })\n                this.selectedModel = model\n                const modelArray = JSON.parse(model.test_json)\n                this.formData = modelArray[0]\n                this.formData.model_id = this.selectedModelId\n\n                for (const [key, value] of Object.entries(this.formData)) {\n                    \n                    //don't need a for field for this\n                    if (key === 'model_id') { continue; }\n\n                    let inputField = {}\n                    if(isNaN(value)){\n                        inputField = {\n                        fieldType: \"TextInput\",\n                        placeholder: value.toString(),\n                        value: value.toString(),\n                        label: key,\n                        name: key\n                        }\n                    } else {\n                        inputField = {\n                        fieldType: \"NumberInput\",\n                        placeholder: parseInt(value, 10),\n                        value: parseInt(value, 10),\n                        label: key,\n                        name: key\n                        }\n                    }\n                    \n                    this.schema.push(inputField)\n\n                    this.$emit(\"changeSelectedModelId\", this.selectedModelId)\n                }\n\n\n                console.log(this.formData)\n\n            }\n        },\n        mounted() {\n            this.getModelTrainingHistory()\n        },\n        watch: { \n            'selectedModelId': function() {\n                this.parseModel()\n            },\n            'history': function() {\n                this.getModelTrainingHistory()\n            },\n            'model': function() {\n                console.log(\"model watched\")\n                this.selectedModelId = this.model.id\n            },\n        }\n\n    }\n</script>\n\n<style>\n    div.bigandgreen { \n            color: green; \n            font-family: 'Helvetica Neue', sans-serif; \n            font-size: 125px; \n            font-weight: bold; \n            letter-spacing: -1px; \n            line-height: 1; \n            padding: 10px 0;\n            margin-left:60px;\n        }\n    div.bigandorange { \n            color: orangered; \n            font-family: 'Helvetica Neue', sans-serif; \n            font-size: 55px; \n            font-weight: bold; \n            letter-spacing: -1px; \n            line-height: 1; \n            padding: 10px 0;\n            margin-left:40px;\n        }\n    div.mediumandgrey { \n            color: darkslategrey; \n            font-family: 'Helvetica Neue', sans-serif; \n            font-size: 25px; \n            font-weight: bold; \n            letter-spacing: -1px; \n            line-height: 1; \n            vertical-align: top;\n            display: inline-block;\n            text-align: center;\n            margin-left:20px;\n        }\n</style>"]}]}