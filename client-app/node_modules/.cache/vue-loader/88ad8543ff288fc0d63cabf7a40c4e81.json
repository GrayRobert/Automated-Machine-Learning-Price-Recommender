{"remainingRequest":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/PredictModel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/PredictModel.vue","mtime":1541975521545},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { APIService } from '../../APIService'\n\nconst apiService = new APIService();\n\nexport default {\n    components: {\n    },\n    data: function() {\n        return {\n            predictingInProgress: false,\n            results: null,\n            modelSelection: [\n                { value: null, text: 'Please select a model' },\n            ],\n            selectedModel: null,\n        };\n    },\n    computed: {\n\n    },\n    methods: {\n        getPrediction(){\n            this.predictingInProgress = true\n            let queryString = 'hotel_code=' + this.hotel_code + '&staff_pick=' + this.staff_pick + '&has_swimming_pool=' + this.has_swimming_pool + '&trip_adv_rating=' + this.trip_adv_rating + '&accom_stars=' + this.accom_stars + '&travel_week=' + this.travel_week + '&booking_week=' + this.booking_week + '&model_type=' + this.model_select_predict\n            console.log('Query String is: ' + queryString)\n            apiService.predictPrice(queryString).then((data) => {\n                    this.results = data;\n                    this.predictingInProgress = false\n                })\n        },\n        getModelTrainingHistory(){\n            let self = this;\n            apiService.getModelTrainingHistory().then((data) => {\n                console.log(data)\n                data.forEach(function(model) {\n                        self.modelSelection.push(\n                            { value: model.id, text: model.id + ' - ' + model.model_type +  ' - ' + model.trained_date}\n                        )\n                    })\n            })    \n        },\n    },\n    mounted() {\n        this.getModelTrainingHistory()\n    }\n}\n",{"version":3,"sources":["PredictModel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PredictModel.vue","sourceRoot":"src/views/custom","sourcesContent":["<template>\n    <b-card>\n        <b-row>\n        <b-col sm=\"5\">\n            <h1>Test Model Prediction</h1>\n        </b-col>\n        <b-col sm=\"7\" class=\"d-none d-md-block\">\n        </b-col>\n        </b-row>\n        <b-row>\n            <b-col sm=\"6\">\n                <b-form>\n                    <b-form-group>\n                        <b-form-select v-model=\"selectedModel\" :options=\"modelSelection\" class=\"mb-3\" />\n                    </b-form-group>\n                </b-form>\n            </b-col>\n        </b-row>\n        <b-row>\n            <div>Selected: <strong>{{ selectedModel }}</strong></div>\n        </b-row>\n        <div slot=\"footer\">\n        <b-row>\n            <b-col class=\"col-sm-3\">\n            <b-button type=\"submit\" size=\"sm\" variant=\"primary\" v-on:click=\"getPrediction\"><i class=\"fa fa-dot-circle-o\"></i> Predict Price</b-button>\n            </b-col>\n            <b-col class=\"col-sm-9\">\n            <b-row v-if=\"predictingInProgress\">\n                <b-col class=\"col-sm-2\">\n                    <div>\n                        <atom-spinner\n                        :animation-duration=\"1000\"\n                        :size=\"30\"\n                        color=\"#20a8d8\"\n                        />\n                    </div>\n                </b-col>\n                <b-col class=\"col-sm-10\">\n                    <span class=\"predicting-text\">Predicting in progress...</span>\n                </b-col>\n            </b-row>\n            <div v-if=\"results !== null\">Predicted Price: {{ results.RecommendedPrice[0] | currency}}</div>\n            </b-col>\n        </b-row>\n        </div>\n    </b-card>\n</template>\n\n<script>\n    import { APIService } from '../../APIService'\n\n    const apiService = new APIService();\n\n    export default {\n        components: {\n        },\n        data: function() {\n            return {\n                predictingInProgress: false,\n                results: null,\n                modelSelection: [\n                    { value: null, text: 'Please select a model' },\n                ],\n                selectedModel: null,\n            };\n        },\n        computed: {\n\n        },\n        methods: {\n            getPrediction(){\n                this.predictingInProgress = true\n                let queryString = 'hotel_code=' + this.hotel_code + '&staff_pick=' + this.staff_pick + '&has_swimming_pool=' + this.has_swimming_pool + '&trip_adv_rating=' + this.trip_adv_rating + '&accom_stars=' + this.accom_stars + '&travel_week=' + this.travel_week + '&booking_week=' + this.booking_week + '&model_type=' + this.model_select_predict\n                console.log('Query String is: ' + queryString)\n                apiService.predictPrice(queryString).then((data) => {\n                        this.results = data;\n                        this.predictingInProgress = false\n                    })\n            },\n            getModelTrainingHistory(){\n                let self = this;\n                apiService.getModelTrainingHistory().then((data) => {\n                    console.log(data)\n                    data.forEach(function(model) {\n                            self.modelSelection.push(\n                                { value: model.id, text: model.id + ' - ' + model.model_type +  ' - ' + model.trained_date}\n                            )\n                        })\n                })    \n            },\n        },\n        mounted() {\n            this.getModelTrainingHistory()\n        }\n    }\n</script>\n\n<style>\n\n</style>"]}]}