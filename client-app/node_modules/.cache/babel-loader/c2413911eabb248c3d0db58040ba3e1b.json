{"remainingRequest":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js!/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robertgray/sandbox/price-recommender/client-app/src/views/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robertgray/sandbox/price-recommender/client-app/src/views/Dashboard.vue","mtime":1544378618610},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TrainModel from './custom/TrainModel';\nimport PredictModel from './custom/PredictModel';\nimport ScatterPlot from './custom/ScatterPlot';\nimport TimeSeries from './custom/TimeSeries';\nimport { APIService } from '../APIService';\nimport { AtomSpinner } from 'epic-spinners';\nimport moment from 'moment';\nimport numeral from 'numeral';\nvar apiService = new APIService();\nexport default {\n  name: 'dashboard',\n  components: {\n    TrainModel: TrainModel,\n    PredictModel: PredictModel,\n    AtomSpinner: AtomSpinner,\n    ScatterPlot: ScatterPlot,\n    TimeSeries: TimeSeries\n  },\n  data: function data() {\n    return {\n      history: [],\n      historyFields: [{\n        key: 'id'\n      }, {\n        key: 'model_type'\n      }, {\n        key: 'dependent_variable'\n      }, {\n        key: 'trained_date',\n        formatter: function formatter(value) {\n          return moment(value).format('MMM Do YYYY, h:mm:ss a');\n        }\n      }, {\n        key: 'accuracy_r2',\n        formatter: function formatter(value) {\n          return numeral(value).format('0.00%');\n        }\n      }, {\n        key: 'actions'\n      }],\n      currentPage: 1,\n      perPage: 5,\n      totalRows: 0,\n      currentModel: {},\n      isAuthenticated: false,\n      token: '',\n      username: ''\n    };\n  },\n  computed: {},\n  filters: {\n    percentageFormat: function percentageFormat(value) {\n      return numeral(value).format('0.00%');\n    },\n    percentageFormatRound: function percentageFormatRound(value) {\n      return numeral(value).format('0%');\n    },\n    dateFormat: function dateFormat(value) {\n      return moment(value).format('MMM Do YYYY, h:mm:ss a');\n    }\n  },\n  methods: {\n    getModelTrainingHistory: function getModelTrainingHistory() {\n      var _this = this;\n\n      apiService.getModelTrainingHistory().then(function (data) {\n        _this.history = data;\n        _this.currentModel = _.last(_.orderBy(data, 'accuracy_r2', 'asc')) || '';\n      });\n    },\n    getRowCount: function getRowCount(items) {\n      return items.length;\n    },\n    deleteModel: function deleteModel(modelID) {\n      var _this2 = this;\n\n      console.log('Deleted model: ' + modelID);\n      apiService.deleteModel(modelID).then(function (data) {\n        _this2.getModelTrainingHistory();\n      });\n    },\n    changeSelectedModelId: function changeSelectedModelId(modelId) {\n      this.currentModel = _.find(this.history, {\n        'id': modelId\n      });\n    }\n  },\n  mounted: function mounted() {\n    //this.getPrediction()\n    this.token = this.$cookies.get(\"token\");\n    this.username = this.$cookies.get(\"username\");\n\n    if (!this.token) {\n      this.$router.push('/pages/login');\n    } else {\n      this.isAuthenticated = true;\n    }\n\n    this.getModelTrainingHistory();\n  },\n  watch: {\n    'history': function history() {\n      console.log('Watched history');\n    }\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA,OAAA,UAAA,MAAA,qBAAA;AACA,OAAA,YAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,sBAAA;AACA,OAAA,UAAA,MAAA,qBAAA;AACA,SAAA,UAAA,QAAA,eAAA;AACA,SAAA,WAAA,QAAA,eAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,OAAA,MAAA,SAAA;AAEA,IAAA,aAAA,IAAA,UAAA,EAAA;AAEA,eAAA;AACA,QAAA,WADA;AAEA,cAAA;AACA,0BADA;AAEA,8BAFA;AAGA,4BAHA;AAIA,4BAJA;AAKA;AALA,GAFA;AASA,QAAA,gBAAA;AACA,WAAA;AACA,eAAA,EADA;AAEA,qBAAA,CACA;AAAA,aAAA;AAAA,OADA,EAEA;AAAA,aAAA;AAAA,OAFA,EAGA;AAAA,aAAA;AAAA,OAHA,EAIA;AACA,aAAA,cADA;AAEA,mBAAA,mBAAA,KAAA,EAAA;AAAA,iBAAA,OAAA,KAAA,EAAA,MAAA,CAAA,wBAAA,CAAA;AAAA;AAFA,OAJA,EAQA;AAAA,aAAA,aAAA;AACA,mBAAA,mBAAA,KAAA,EAAA;AAAA,iBAAA,QAAA,KAAA,EAAA,MAAA,CAAA,OAAA,CAAA;AAAA;AADA,OARA,EAUA;AAAA,aAAA;AAAA,OAVA,CAFA;AAcA,mBAAA,CAdA;AAeA,eAAA,CAfA;AAgBA,iBAAA,CAhBA;AAiBA,oBAAA,EAjBA;AAkBA,uBAAA,KAlBA;AAmBA,aAAA,EAnBA;AAoBA,gBAAA;AApBA,KAAA;AAsBA,GAhCA;AAiCA,YAAA,EAjCA;AAoCA,WAAA;AACA,sBAAA,0BAAA,KAAA,EAAA;AACA,aAAA,QAAA,KAAA,EAAA,MAAA,CAAA,OAAA,CAAA;AACA,KAHA;AAIA,2BAAA,+BAAA,KAAA,EAAA;AACA,aAAA,QAAA,KAAA,EAAA,MAAA,CAAA,IAAA,CAAA;AACA,KANA;AAOA,gBAAA,oBAAA,KAAA,EAAA;AACA,aAAA,OAAA,KAAA,EAAA,MAAA,CAAA,wBAAA,CAAA;AACA;AATA,GApCA;AA+CA,WAAA;AACA,2BADA,qCACA;AAAA;;AACA,iBAAA,uBAAA,GAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,OAAA,GAAA,IAAA;AACA,cAAA,YAAA,GAAA,EAAA,IAAA,CAAA,EAAA,OAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,KAAA,EAAA;AACA,OAHA;AAKA,KAPA;AAQA,eARA,uBAQA,KARA,EAQA;AACA,aAAA,MAAA,MAAA;AACA,KAVA;AAWA,eAXA,uBAWA,OAXA,EAWA;AAAA;;AACA,cAAA,GAAA,CAAA,oBAAA,OAAA;AACA,iBAAA,WAAA,CAAA,OAAA,EAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,eAAA,uBAAA;AACA,OAFA;AAGA,KAhBA;AAiBA,yBAjBA,iCAiBA,OAjBA,EAiBA;AACA,WAAA,YAAA,GAAA,EAAA,IAAA,CAAA,KAAA,OAAA,EAAA;AAAA,cAAA;AAAA,OAAA,CAAA;AACA;AAnBA,GA/CA;AAoEA,SApEA,qBAoEA;AACA;AACA,SAAA,KAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,OAAA,CAAA;AACA,SAAA,QAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,UAAA,CAAA;;AACA,QAAA,CAAA,KAAA,KAAA,EAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,cAAA;AACA,KAFA,MAEA;AACA,WAAA,eAAA,GAAA,IAAA;AACA;;AACA,SAAA,uBAAA;AACA,GA9EA;AA+EA,SAAA;AACA,eAAA,mBAAA;AACA,cAAA,GAAA,CAAA,iBAAA;AACA;AAHA;AA/EA,CAAA","sourcesContent":["<template>\n  <div class=\"animated fadeIn\">\n    <b-row>\n      <b-col>\n        <b-card-group deck>\n          <train-model />\n          <b-card>\n            <b-row>\n              <b-col sm=\"5\">\n                <h2>Predicted V Actual</h2>\n              </b-col>\n              <b-col sm=\"7\" class=\"d-none d-md-block\">\n              </b-col>\n            </b-row>\n            <b-row>\n              <b-col>\n                <scatter-plot :model=\"currentModel\" />\n              </b-col>\n            </b-row>\n            <div slot=\"footer\">\n              <b-row class=\"text-center\">\n                  <span>Based on Model: ID:{{currentModel.id}} | Type:{{currentModel.model_type}}</span>\n              </b-row>\n            </div>\n          </b-card>\n        </b-card-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        &nbsp;\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-card-group deck>\n          <predict-model :history=\"history\" :model=\"currentModel\" v-on:changeSelectedModelId=\"changeSelectedModelId($event)\"/>\n          <b-card header=\"Model Training History\">\n            <b-table striped hover responsive=\"sm\" :items=\"history\" :fields=\"historyFields\" :current-page=\"currentPage\" :per-page=\"perPage\">\n              <template slot=\"actions\" slot-scope=\"cell\">\n                <b-btn size=\"sm\" v-if=\"cell.item.model_file\" @click.stop=\"deleteModel(cell.item.id)\">Delete</b-btn>\n              </template>\n            </b-table>\n            <nav>\n              <b-pagination :total-rows=\"getRowCount(history)\" :per-page=\"perPage\" v-model=\"currentPage\" prev-text=\"Prev\" next-text=\"Next\" hide-goto-end-buttons/>\n            </nav>\n          </b-card>\n        </b-card-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        &nbsp;\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <time-series :model=\"currentModel\" />\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport TrainModel from './custom/TrainModel'\nimport PredictModel from './custom/PredictModel'\nimport ScatterPlot from './custom/ScatterPlot'\nimport TimeSeries from './custom/TimeSeries'\nimport {APIService} from '../APIService'\nimport { AtomSpinner } from 'epic-spinners'\nimport moment from 'moment'\nimport numeral from 'numeral'\n\nconst apiService = new APIService();\n\nexport default {\n  name: 'dashboard',\n  components: {\n    TrainModel,\n    PredictModel,\n    AtomSpinner,\n    ScatterPlot,\n    TimeSeries\n  },\n  data: function () {\n    return {\n      history: [],\n      historyFields: [\n        {key: 'id'},\n        {key: 'model_type'},\n        {key: 'dependent_variable'},\n        {\n          key: 'trained_date',\n          formatter: (value) => { return moment(value).format('MMM Do YYYY, h:mm:ss a') }\n        },\n        {key: 'accuracy_r2',\n          formatter: (value) => { return numeral(value).format('0.00%')}},\n        {key: 'actions'}\n      ],\n      currentPage: 1,\n      perPage: 5,\n      totalRows: 0,\n      currentModel: {},\n      isAuthenticated: false,\n      token: '',\n      username: '',\n    }\n  },\n  computed: {\n\n  },\n  filters: {\n    percentageFormat: function(value) {\n      return numeral(value).format('0.00%')\n    },\n    percentageFormatRound: function(value) {\n      return numeral(value).format('0%')\n    },\n    dateFormat: function(value) {\n      return moment(value).format('MMM Do YYYY, h:mm:ss a')\n    }\n  },\n  methods: {\n      getModelTrainingHistory(){\n      apiService.getModelTrainingHistory().then((data) => {\n              this.history = data;\n              this.currentModel = _.last(_.orderBy(data, 'accuracy_r2', 'asc')) || ''\n          })\n      \n      },\n      getRowCount (items) {\n        return items.length\n      },\n      deleteModel (modelID) {\n        console.log('Deleted model: ' + modelID)\n        apiService.deleteModel(modelID).then((data) => {\n              this.getModelTrainingHistory()\n          })\n      },\n      changeSelectedModelId (modelId) {\n        this.currentModel = _.find(this.history, { 'id': modelId })\n      }\n  },\n  mounted () {\n    //this.getPrediction()\n    this.token = this.$cookies.get(\"token\")\n    this.username = this.$cookies.get(\"username\")\n    if(!this.token) {\n          this.$router.push('/pages/login')\n    } else {\n      this.isAuthenticated = true;\n    }\n    this.getModelTrainingHistory()\n  },\n  watch: { \n            'history': function() {\n                console.log('Watched history')\n            },\n        }\n}\n</script>\n\n<style>\n  /* IE fix */\n  #card-chart-01, #card-chart-02 {\n    width: 100% !important;\n  }\n  hr.nice {\n    border-top: 1px dotted #8c8b8b;\n    border-bottom: 1px dotted #fff;\n  }\n  h1.nice { \n    color: green; \n    font-family: 'Helvetica Neue', sans-serif; \n    font-size: 175px; \n    font-weight: bold; \n    letter-spacing: -1px; \n    line-height: 1; \n    text-align: center; \n    padding: 50px 0;\n    }\n  .predicting-text {\n        margin-top:5px;\n        color:#20a8d8;\n        vertical-align: middle;\n        display: inline-block;\n    }\n    .center {\n        margin: auto;\n        width: 50%;\n    }\n</style>\n"],"sourceRoot":"src/views"}]}