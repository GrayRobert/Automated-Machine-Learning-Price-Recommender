{"remainingRequest":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js!/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/FormGenerator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/FormGenerator.vue","mtime":1542552939775},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NumberInput from \"./NumberInput\";\nimport TextInput from \"./TextInput\";\nexport default {\n  name: \"FormGenerator\",\n  components: {\n    NumberInput: NumberInput,\n    TextInput: TextInput\n  },\n  props: [\"schema\", \"value\"],\n  data: function data() {\n    return {\n      formData: this.value || {}\n    };\n  },\n  methods: {\n    updateForm: function updateForm(fieldName, value) {\n      this.$nextTick(function () {\n        this.$set(this.formData, fieldName, value);\n        this.$emit(\"input\", this.formData);\n      });\n    }\n  },\n  watch: {\n    // we need to watch for the value props being set when user selects model to predict with\n    value: function value() {\n      this.formData = this.value;\n    }\n  }\n};",{"version":3,"sources":["FormGenerator.vue"],"names":[],"mappings":";;;;;;;;;;;;AAaA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,eAAA;AACA,QAAA,eADA;AAEA,cAAA;AAAA,4BAAA;AAAA;AAAA,GAFA;AAGA,SAAA,CAAA,QAAA,EAAA,OAAA,CAHA;AAIA,MAJA,kBAIA;AACA,WAAA;AACA,gBAAA,KAAA,KAAA,IAAA;AADA,KAAA;AAGA,GARA;AASA,WAAA;AACA,cADA,sBACA,SADA,EACA,KADA,EACA;AACA,WAAA,SAAA,CAAA,YAAA;AACA,aAAA,IAAA,CAAA,KAAA,QAAA,EAAA,SAAA,EAAA,KAAA;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,KAAA,QAAA;AACA,OAHA;AAKA;AAPA,GATA;AAkBA,SAAA;AACA;AACA,WAAA,iBAAA;AACA,WAAA,QAAA,GAAA,KAAA,KAAA;AACA;AAJA;AAlBA,CAAA","sourcesContent":["<template>\n  <div>\n    <component v-for=\"(field, index) in schema\"\n               :key=\"index\"\n               :is=\"field.fieldType\"\n               :value=\"formData[field.name]\"\n               @input=\"updateForm(field.name, $event)\"\n               v-bind=\"field\">\n    </component>\n  </div>\n</template>\n\n<script>\nimport NumberInput from \"./NumberInput\";\nimport TextInput from \"./TextInput\";\nexport default {\n  name: \"FormGenerator\",\n  components: { NumberInput, TextInput },\n  props: [\"schema\", \"value\"],\n  data() {\n    return {\n      formData: this.value || {}\n    };\n  },\n  methods: {\n    updateForm(fieldName, value) {\n        this.$nextTick(function () {\n            this.$set(this.formData, fieldName, value);\n            this.$emit(\"input\", this.formData);\n        })\n\n    }\n  },\n  watch: {\n    // we need to watch for the value props being set when user selects model to predict with\n    value: function () {\n      this.formData= this.value\n    }\n  },\n};\n</script>\n"],"sourceRoot":"src/views/custom"}]}