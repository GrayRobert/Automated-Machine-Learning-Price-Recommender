{"remainingRequest":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js!/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/FileUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robertgray/sandbox/price-recommender/client-app/src/views/custom/FileUpload.vue","mtime":1541940172655},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/cache-loader/dist/cjs.js","mtime":1539889924615},{"path":"/Users/robertgray/sandbox/price-recommender/client-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as d3 from 'd3';\nimport { APIService } from '../../APIService';\nimport { AtomSpinner } from 'epic-spinners';\nimport Papa from 'papaparse';\nvar apiService = new APIService();\nvar STATUS_INITIAL = 0,\n    STATUS_SAVING = 1,\n    STATUS_SUCCESS = 2,\n    STATUS_FAILED = 3;\nexport default {\n  components: {\n    AtomSpinner: AtomSpinner\n  },\n  data: function data() {\n    return {\n      preProcessModal: false,\n      uploadedFiles: [],\n      accuracy: null,\n      uploadError: null,\n      currentStatus: null,\n      uploadFieldName: 'file',\n      trainingInProgress: false,\n      model_select_train: 'RFR',\n      fieldOptions: [],\n      encodeFields: [],\n      dropFields: [],\n      predictField: null,\n      categroicals: [],\n      targetVariable: null\n    };\n  },\n  computed: {\n    isInitial: function isInitial() {\n      return this.currentStatus === STATUS_INITIAL;\n    },\n    isSaving: function isSaving() {\n      return this.currentStatus === STATUS_SAVING;\n    },\n    isSuccess: function isSuccess() {\n      return this.currentStatus === STATUS_SUCCESS;\n    },\n    isFailed: function isFailed() {\n      return this.currentStatus === STATUS_FAILED;\n    }\n  },\n  methods: {\n    reset: function reset() {\n      // reset form to initial state\n      this.currentStatus = STATUS_INITIAL;\n      this.uploadedFiles = [];\n      this.uploadError = null;\n    },\n    save: function save(formData) {\n      var _this = this;\n\n      // upload data to the server\n      this.currentStatus = STATUS_SAVING;\n      apiService.uploadFile(formData).then(function (response) {\n        _this.uploadedFiles = [].concat(response.FileName);\n        _this.currentStatus = STATUS_SUCCESS;\n      }).catch(function (err) {\n        _this.uploadError = err.response;\n        _this.currentStatus = STATUS_FAILED;\n      });\n    },\n    filesChange: function filesChange(fieldName, fileList) {\n      // handle file changes\n      var formData = new FormData();\n      var self = this;\n      var papaConfig = {\n        header: true,\n        dynamicTyping: true,\n        preview: 10,\n        complete: function complete(data) {\n          data.meta.fields.forEach(function (field) {\n            self.fieldOptions.push({\n              text: field,\n              value: field\n            });\n          });\n        },\n        error: function error(err) {\n          console.log(err);\n        }\n      };\n      Papa.parse(fileList[0], papaConfig);\n      if (!fileList.length) return; // append the files to FormData\n\n      formData.append(fieldName, fileList[0], fileList[0].name); // save it\n\n      this.save(formData);\n    },\n    trainModel: function trainModel() {\n      var _this2 = this;\n\n      this.trainingInProgress = true;\n      var queryString = 'model_type=' + this.model_select_train;\n      console.log('Query String is: ' + queryString);\n      apiService.trainModel(queryString).then(function (data) {\n        _this2.accuracy = data;\n        _this2.trainingInProgress = false;\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.reset();\n  }\n};",{"version":3,"sources":["FileUpload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <b-card>\n          <b-row>\n            <b-col>\n            <form enctype=\"multipart/form-data\" novalidate v-if=\"isInitial || isSaving\">\n                <h1>Upload CSV File</h1>\n                <div class=\"dropbox\">\n                <input type=\"file\" :name=\"uploadFieldName\" :disabled=\"isSaving\" @change=\"filesChange($event.target.name, $event.target.files); fileCount = $event.target.files.length\"\n                    accept=\"text/csv\" class=\"input-file\">\n                    <div class=\"arrow-down\"></div>\n                    <p v-if=\"isInitial\">\n                    Drop your CSV file here <br> or click to browse\n                    </p>\n                    <p v-if=\"isSaving\">\n                    Uploading {{ fileCount }} files...\n                    </p>\n                </div>\n            </form>\n            </b-col>\n          </b-row>\n          <b-row>\n              <b-col>\n                  <div v-if=\"isSuccess\">\n                    <h2>Uploaded {{ uploadedFiles.length }} file(s) successfully.</h2>\n                    <p>\n                    <a href=\"javascript:void(0)\" @click=\"reset()\">Upload again</a>\n                    </p>\n                    <ul class=\"list-unstyled\">\n                    <li v-for=\"file in uploadedFiles\">\n                        {{ file }}\n                    </li>\n                    </ul>\n                </div>\n                <!--FAILED-->\n                <div v-if=\"isFailed\">\n                    <h2>Uploaded failed.</h2>\n                    <p>\n                    <a href=\"javascript:void(0)\" @click=\"reset()\">Try again</a>\n                    </p>\n                    <pre>{{ uploadError }}</pre>\n                </div>\n              </b-col>\n          </b-row>\n          <b-row>\n            <b-col>\n              <b-form-group\n                label=\"Select Machine Learning Model\"\n                label-for=\"model_select_train\"\n                :label-cols=\"10\"\n                :horizontal=\"false\">\n                <b-form-radio-group id=\"model_select_train\"\n                  :plain=\"true\"\n                  :options=\"[\n                    {text: 'Random Forrest ',value: 'RFR'},\n                    {text: 'Xtra Trees ',value: 'EXT'},\n                  ]\"\n                  :checked=\"2\" v-model=\"model_select_train\">\n                </b-form-radio-group>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <div slot=\"footer\">\n            <b-row>\n                <b-col class=\"col-sm-2\">\n                    <b-button type=\"submit\" size=\"sm\" variant=\"primary\" v-on:click=\"preProcessModal = true\"><i class=\"fa fa-dot-circle-o\"></i> Pre Process</b-button>\n                </b-col>\n                <b-col class=\"col-sm-2\">\n                    <b-button type=\"submit\" size=\"sm\" variant=\"primary\" v-on:click=\"trainModel\"><i class=\"fa fa-dot-circle-o\"></i> Train Model</b-button>\n                </b-col>\n                <b-col class=\"col-sm-8\">\n                    <b-row v-if=\"trainingInProgress\">\n                        <b-col class=\"col-sm-2\">\n                            <div>\n                                <atom-spinner\n                                :animation-duration=\"1000\"\n                                :size=\"30\"\n                                color=\"#20a8d8\"\n                                />\n                            </div>\n                        </b-col>\n                        <b-col class=\"col-sm-10\">\n                            <span class=\"training-text\">Training in progress...</span>\n                        </b-col>\n                    </b-row>\n                    <div id=\"accuracy\"><span v-if=\"accuracy !== null\">Accuracy: {{ accuracy.R2 }}</span></div>\n                </b-col>\n            </b-row>\n          </div>\n            <b-modal title=\"Pre Processing Selection\" size=\"lg\" v-model=\"preProcessModal\" @ok=\"preProcessModal = false\">\n                <b-row>\n                    <b-col>\n                        <b-form-group\n                            label=\"Select fields to encode\"\n                            label-for=\"encodeFields\"\n                            :label-cols=\"3\"\n                            :horizontal=\"true\">\n                            <b-form-select id=\"encodeFields\"\n                                :plain=\"true\"\n                                :multiple=\"true\"\n                                :options=\"fieldOptions\"\n                                v-model=\"encodeFields\">\n                                </b-form-select>\n                        </b-form-group>\n                    </b-col>\n                </b-row>\n                <b-row>\n                    <b-col>\n                        <b-form-group\n                            label=\"Select fields to drop\"\n                            label-for=\"dropFields\"\n                            :label-cols=\"3\"\n                            :horizontal=\"true\">\n                            <b-form-select id=\"dropFields\"\n                                :plain=\"true\"\n                                :multiple=\"true\"\n                                :options=\"fieldOptions\"\n                                v-model=\"dropFields\">\n                                </b-form-select>\n                        </b-form-group>\n                        {{ dropFields }}\n                    </b-col>\n                </b-row>\n                <b-row>\n                    <b-col>\n                        <b-form-group\n                            label=\"Select field to predict\"\n                            label-for=\"predictField\"\n                            :label-cols=\"3\"\n                            :horizontal=\"true\">\n                            <b-form-select id=\"predictField\"\n                            :plain=\"true\"\n                            :options=\"fieldOptions\"\n                            value=\"Please select\"\n                            v-model=\"predictField\">\n                            </b-form-select>\n                        </b-form-group>\n                        {{ predictField }}\n                    </b-col>\n                </b-row>\n                <b-row>\n                    <b-col>\n                        Encode Fields: {{ encodeFields }}\n                    </b-col>\n                </b-row>\n                <b-row>\n                    <b-col>\n                        Drop Fields: {{ dropFields }}\n                    </b-col>\n                </b-row>\n                <b-row>\n                    <b-col>\n                        Predict Field: {{ predictField }}\n                    </b-col>\n                </b-row>\n            </b-modal>\n        </b-card>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport { APIService } from '../../APIService'\nimport { AtomSpinner } from 'epic-spinners'\nimport Papa from 'papaparse'\n\nconst apiService = new APIService()\nconst STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;\n\n  export default {\n    components: {\n      AtomSpinner\n    },\n    data: function() {\n        return {\n            preProcessModal: false,\n            uploadedFiles: [],\n            accuracy: null,\n            uploadError: null,\n            currentStatus: null,\n            uploadFieldName: 'file',\n            trainingInProgress: false,\n            model_select_train: 'RFR',\n            fieldOptions: [],\n            encodeFields: [],\n            dropFields: [],\n            predictField: null,\n            categroicals: [],\n            targetVariable: null\n        };\n    },\n    computed: {\n      isInitial() {\n        return this.currentStatus === STATUS_INITIAL;\n      },\n      isSaving() {\n        return this.currentStatus === STATUS_SAVING;\n      },\n      isSuccess() {\n        return this.currentStatus === STATUS_SUCCESS;\n      },\n      isFailed() {\n        return this.currentStatus === STATUS_FAILED;\n      }\n    },\n    methods: {\n        reset() {\n            // reset form to initial state\n            this.currentStatus = STATUS_INITIAL;\n            this.uploadedFiles = [];\n            this.uploadError = null;\n        },\n        save(formData) {\n            // upload data to the server\n            this.currentStatus = STATUS_SAVING;\n                apiService.uploadFile(formData)\n                    .then(response => {\n                    this.uploadedFiles = [].concat(response.FileName);\n                    this.currentStatus = STATUS_SUCCESS;\n                    })\n                    .catch(err => {\n                    this.uploadError = err.response;\n                    this.currentStatus = STATUS_FAILED;\n                    });\n        },\n        filesChange(fieldName, fileList) {\n            // handle file changes\n            const formData = new FormData();\n            let self = this;\n\n            const papaConfig = {\n                    header: true,\n                    dynamicTyping: true,\n                    preview: 10,\n                    complete: function (data) {\n                        data.meta.fields.forEach(function(field) {\n                            self.fieldOptions.push({\n                                text: field,\n                                value: field\n                            })\n                        })\n                    },\n                    error: function (err) {\n                        console.log(err);\n                    }\n                }\n\n\n            Papa.parse(fileList[0], papaConfig);\n\n            if (!fileList.length) return;\n\n            // append the files to FormData\n            formData.append(fieldName, fileList[0], fileList[0].name);\n\n\n            \n\n            // save it\n            this.save(formData);\n        },\n        trainModel(){\n            this.trainingInProgress = true\n            let queryString = 'model_type=' + this.model_select_train\n            console.log('Query String is: ' + queryString)\n            apiService.trainModel(queryString).then((data) => {\n                    this.accuracy = data\n                    this.trainingInProgress = false\n                })\n        },\n    },\n    mounted() {\n        this.reset();\n    }\n  }\n</script>\n\n<style>\n    .dropbox {\n        border: 20px;\n        border-top: 0;\n        border-style: solid;\n        border-color: rgb(243, 241, 241);\n        margin:30px;\n        background: rgba(255, 255, 255, 0.705);\n        color: dimgray;\n        padding: 10px 10px;\n        min-height: 200px; /* minimum height */\n        position: relative;\n        cursor: pointer;\n    }\n\n    .input-file {\n        opacity: 0; /* invisible but it's there! */\n        width: 100%;\n        height: 200px;\n        position: absolute;\n        cursor: pointer;\n    }\n\n    .dropbox:hover {\n        background: rgba(235, 235, 235, 0.562); /* when mouse over to the drop zone, change color */\n    }\n\n    .dropbox p {\n        font-size: 1.2em;\n        text-align: center;\n        padding: 50px 0;\n    }\n\n    .arrow-down {\n        width: 0; \n        height: 0;\n        left: 45%;\n        top:20%;\n        border-left: 20px solid transparent;\n        border-right: 20px solid transparent;\n\n        border-top: 20px solid rgb(231, 231, 231);\n        position: absolute;\n    }\n    .training-text {\n        margin-top:5px;\n        color:#20a8d8;\n        vertical-align: middle;\n        display: inline-block;\n    }\n</style>"],"sourceRoot":"src/views/custom"}]}